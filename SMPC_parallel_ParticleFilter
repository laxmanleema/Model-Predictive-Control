% shrinking horizon mpc for PMMA Process
% Constants
% Estimator
% Measurements
% Optimization Problem
% spmc simulation
% N ( Run Window ) = number of sampling times = Total Time/Sampling Time(Ts)
% Initialize loop
% Initial Conditions
%function [Y_sim,X_sim,X_pred,U_seq] = Untitled5(N0_p,lol)
global N_workers
N_workers=24;
%delete(gcp('nocreate'))
%parpool ('local',N_workers)
tic
warning('off','all')
SMPC_1();
toc
function []=SMPC_1(~)
warning('off','all')
global C error_counter
error_counter=0;
global Xhat_N U p q YTrue_N  We Wu i ek_f Phi_r Ts Y_Setpoint P_Y;
total_time = 1;
C = zeros(1,13); C(1,13)=1;
N = 10000;
N0_p = 10000;
Ts = total_time/N;
I_0=0.258;
M_0=1e2;
MW_m= 0.10013;
U = 70;
rho_m = 966.5 - 1.1*(70);
y0=zeros(13,1);
y0(1)= I_0;
y0(2)= M_0;
y0(10)= M_0;
y0(11)= M_0;
y0(12)= ((M_0*(MW_m))/(rho_m));
P_0 = diag(0.0001*[0.001;0.01;0.001;0.001;0.001;0.001;0.0001;0.0001;0.0001;1;1;0.1;0.001]);
Phi_e = 0.9;
Phi_r = 0.9;
We = 10;
Wu = 5;
p = 10;
q = 4;
P_X=0.1*eye(13,13);
P_Y=1000;
Xi = y0;% initial condition of DAE (13X1) vector 
U_seq=U; %initial input
Y_Setpoint = 0.5;% Setpoint is conversion
Xhat_mean = Xi; % initial mean of Estimate
Xhat_N = transpose(mvnrnd(Xhat_mean,sqrt(P_0),N0_p));
Ti= 0;
Tf= Ts;
ek_f = 0;
X_sim = [Xi];
Y_sim = [C*Xi];
X_pred=[Xi];
oldopts=optimset;
options=optimset(oldopts,'display',"off");
for i=1:10
    disp(i)
    XTrue_N = SMPC_MMA_Markov_Sim1(Ti,Tf,Xi,U) ;% Model Simulation with XTrue_(N-1) and U_ (N-1)
    X_sim = [X_sim,XTrue_N];  
    YTrue_N = C*XTrue_N ;
    Y_sim = [Y_sim,YTrue_N];
    [Xhat_N , Xhat_mean] = SMPC_State_Estimation1( P_Y, Ts  , YTrue_N, i ,Xhat_N ,U);
    X_pred = [X_pred,Xhat_mean];
    E_k = YTrue_N - C*Xhat_mean;
    ek_f= Phi_e*ek_f + (eye(1,1) - Phi_e)*E_k;
    U_opt=fmincon(@SMPC_objF1,zeros(q,1),[],[],[],[],[50],[80],[],options);
    U = U_opt(1,:);
    U_seq=[U_seq,U];
    Xi = XTrue_N(1:13,:);
    Ti = Ti + Ts;
    Tf = Tf + Ts;
end
Timee=0:1:10;
A=[Timee;Y_sim;U_seq;X_pred(end,:)];
FileID=fopen("SMPC_PMMA_output&Input.txt",'w+');
fprintf(FileID,'%8s %12s %12s %12s\r\n','Time','Conversion','T_input','Pred_conv');
fprintf(FileID,'%8.2f %12.4f %12.4f %12.4f \r\n',A);
fclose(FileID);

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Simulation  of MMA as Markov Process For Particle Filter as ode %
function [yf]= SMPC_MMA_Markov_Sim1(Ti,Tf,yi,U)
%%%%Parameters for the MMA Dae system
E_d= 128.45E3;                
E_p= 18.22E3;                
E_td = 2.937E3;              
k_d0= 6.3E16;               
k0_tm = 279.6E6;
k0_td0= 588E4;
k0_p0 = 298.2E2;  
T=U +273.15;                  
A(1,1)= -2.293E-2;
A(1,2)= 7.973E-1;
A(2,1)= -2.379E-1;
A(2,2)= 8.784;
A(3,1)= 1.385E-1;
A(3,2)= -3.609E1;
A(4,1)= -1.745E-3;
A(4,2)= 2.223;
B(1,1)= -4.020E-3;
B(1,2)= 1.246E-1;
B(2,1)= -3.054E-1;
B(2,2)= 9.734;
B(3,1)= 2.706E-1;
B(3,2)= 8.278;
B(4,1)= 2.493E-1;
B(4,2)= -4.459E1;
R_gas = 8.314;                %% universal gas constant J/mol.K
A_1= A(1,1)*(T-273.15) + A(1,2);
A_2 = A(2,1)*(T-273.15) + A(2,2);
A_3 = A(3,1)*(T-273.15) + A(3,2);
A_4 = A(4,1)*(T-273.15) + A(4,2);
B_1 = B(1,1)*(T-273.15) + B(1,2);
B_2 = B(2,1)*(T-273.15) + B(2,2);
B_3 = B(3,1)*(T-273.15) + B(3,2);
B_4 = B(4,1)*(T-273.15) + B(4,2);
MW_m = 0.10013;                                 
R_li = 0;%U;      % R_li and R_lm and R_vm are kept zero for a batch reactor 
R_lm = 0; %U(3);
R_vm = 0;
f = 0.58;
k_d = k_d0*exp(-E_d/(R_gas*T));       % 1/s
k_tc = 0.0 ;
k0_td = k0_td0*exp(-E_td/(R_gas*T));  % m.cube per mol per secons
k_tm = k0_tm*exp(-E_p/(R_gas*T));     % m.cube per mol per secons
kp_0 = k0_p0*exp(-E_p/(R_gas*T));     % m.cube per mol per secons
kt_0 = k0_td;                         % m.cube per mol per seconds
rho_m = 966.5 - 1.1*(T-273.15);       % Kg/m^3
rho_p = 1200;                         % Kg/m^3
M_0=1e2;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
M=diag([1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0]);  %% Mass Matrix form
y0=[yi;incond(yi)];
% options=odeset('Mass',M,'AbsTol',1e-2);
options=odeset('Mass',M,'InitialStep',1e-6,'MaxStep',1e-4,'Stats','off','AbsTol',[1e-2,1,1e-2,1,1,1,1e-2,1e-2,1e-2,1,1,1,1e-2,1e-3,1e-3,1e-3],'RelTol',1e-1,'BDF','on','MaxOrder',5);
tspan=[Ti Tf];
try
[t,y] = ode15s(@MMADae2,tspan,y0,options);
yf=y(end,1:13)';
catch
%     error_counter = error_counter+1
end

%% function handle for Dae simulation in Ode15s %
function Dae2= MMADae2(t,x)
    Dae2=zeros(16,1);

Dae2(1) = -k_d*x(1) + R_li;
Dae2(2) = -(x(15) + k_tm)*((x(4)*x(2))/(x(12))) + R_lm - R_vm - x(15)*((x(3)*x(2))/x(12));
Dae2(3) = 2*f*k_d*x(1) - x(15)*((x(3)*x(2))/(x(12)));
Dae2(4) = x(15)*((x(3)*x(2))/(x(12))) - x(14)*(((x(4))^2)/x(12));
Dae2(5) = x(15)*((x(3)*x(2))/(x(12))) + x(15)*((x(2)*x(4))/x(12)) -x(14)*((x(4)*x(5))/x(12)) + k_tm*((x(2)*(x(4) - x(5)))/x(12)) ;
Dae2(6) = x(15)*((x(3)*x(2))/(x(12))) + x(15)*((x(2)*(x(4) + 2*x(5)))/x(12)) - x(14)*((x(4)*x(6))/x(12)) + k_tm*((x(2)*(x(4) - x(6)))/x(12)) ;
Dae2(7) = k_tm*((x(2)*x(4))/x(12)) +(x(16) + 0.5*k_tc)*(((x(4))^2)/x(12));
Dae2(8) = k_tm*((x(2)*x(5))/x(12)) + x(14)*((x(4)*x(5))/x(12));
Dae2(9) = k_tm*((x(2)*x(6))/x(12)) + x(14)*((x(4)*x(6))/x(12)) + k_tc*(((x(5))^2)/x(12));
Dae2(10) =  R_lm - R_vm ;
Dae2(11) =  R_lm ;
Dae2(12) = MW_m*((1/rho_m)-(1/rho_p))*(-(x(15) + k_tm)*((x(4)*x(2))/(x(12))) + R_lm - R_vm - x(15)*((x(3)*x(2))/x(12)));
Dae2(13)= (-1/M_0)*(-(x(15) + k_tm)*((x(4)*x(2))/(x(12))) + R_lm - R_vm - x(15)*((x(3)*x(2))/x(12)));
Dae2(14) =  -x(14)+(kt_0)*exp(A_1 + A_2*(x(13)) + A_3*((x(13))^2) + A_4*((x(13))^3));
Dae2(15) =  -x(15) +(kp_0)*exp(B_1 + B_2*(x(13)) + B_3*((x(13))^2) + B_4*((x(13))^3));
Dae2(16) =  -x(16)+ k0_td*exp(A_1 + A_2*x(13) + A_3*((x(13))^2) + A_4*((x(13))^3));
end
    function [ic]=incond(x)
        ic=zeros(3,1);
        ic(1) =  (kt_0)*exp(A_1 + A_2*(x(13)) + A_3*((x(13))^2) + A_4*((x(13))^3));
        ic(2) =  (kp_0)*exp(B_1 + B_2*(x(13)) + B_3*((x(13))^2) + B_4*((x(13))^3));
        ic(3) =  k0_td*exp(A_1 + A_2*x(13) + A_3*((x(13))^2) + A_4*((x(13))^3));
    end

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% PMMA MArkov Process For use in Particle filtering of MMA %%
% function [x_pred]=SMPC_MMA_Markov1(x,k,Ts,U)
%   Tf= k*Ts;
%   Ti= Tf - Ts;
% x_pred=zeros(size(x));
% p=size(x,2);
% a=1;
%  while p > 0
%     y0=(x(:,a));
%     try
%     x_pred(:,a)= SMPC_MMA_Markov_Sim1(Ti,Tf,y0,U);
%     a=a+1;
%     p = p -1;
%     catch
% %         x_pred(:,a)=[];
%         x(:,a)=[];
%         p = p -1 ;
% %         fprintf("cool");
%     end
% end
% end
% %%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%

%% PARTICLE FILTER FOR MMMA POLYMERISATION PROCESS IN SMPC %%
function [Sx_pred, Sz_pred] = SMPC_State_Estimation1( P_Y, Ts , SY_true,Samp ,Sx_pred ,U)
global C
% STEP #1 Propagating (N_p) no. of particles with inputs ( T_input,U_input )
    %StateNoise generation from P_X covariance and zero mean ; S_Noise=[n_dstates, n_p]
    %S_Noise = mvnrnd(zeros(1,N_Dstates),sqrt(P_X),N_p)';
    Sx_pred = SMPC_MMA_Markov1(Sx_pred,Samp,Ts,U)  ;
    N_p=size(Sx_pred,2);
    Pred_Error = repmat(SY_true,1,N_p) - C*Sx_pred;
    w = Weights_Norm(Pred_Error , P_Y);
    Sz_pred=Sx_pred*w';
% STEP #6 Resampling of initial particles
    ind = resampling(w);
    Sx_pred=Sx_pred(:, ind);

%% InHouse Anonymous Functions %%
function [w] = Weights_Norm(Pred_Error, P_Y)
p = diag(P_Y);
n2 = numel(p);
w=zeros(size(Pred_Error(1,:)));
for r=1:n2
    wi(1,:)=(1/sqrt(2*pi*p(r)))*exp(-((Pred_Error(r,:)).^2)/(2*p(r)));
    wi=wi/sum(wi);
    if isnan(wi)
        w=w;
    else
        w = w + wi;
    end
end
w=w/sum(w);
%w
end

%% SYSTEMATIC RESAMPLING %%
function [i]= resampling(q)
qc=cumsum(q);
M=length(q);
u=(0:M-1+rand(1))/M;
b=1;
for j=1:M
    while (qc(b)<u(j))
        b=b+1;
    end
    i(j)=b;
end
end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function objfn=SMPC_objF1(Ukf)  %% Ukf is assumed 2qX1 matrix
global  U p q YTrue_N  We Wu i ek_f Phi_r Y_Setpoint P_Y Ts Xhat_N C;
x_traj = 0;
Samp=i+1;
Sx_pred=Xhat_N;
uk_1=U;
objfn=0.0;
%setpoint_trajectory
for j=1:q
    uk_f=Ukf(j,:);
% zkpred is prediction or transition from one state to other through
% particle filter
     x_traj = Phi_r*x_traj + (1 - Phi_r)*(Y_Setpoint - YTrue_N);
     Y_traj = YTrue_N + x_traj;
[Sx_pred, Sz_pred]= SMPC_State_Estimation1( P_Y, Ts , YTrue_N, Samp ,Sx_pred, uk_f ) ; %
    Samp= Samp+1;
    ykpred= C*Sz_pred +ek_f ;
    Error_f= Y_traj - ykpred;
    objfn = objfn + Error_f'*We*Error_f;
    delta_uk = uk_f - uk_1;
    uk_1=uk_f;
    objfn = objfn + delta_uk'*Wu*delta_uk ;
end
    for r = q+1:p
    uk_f=Ukf(q,:);
     x_traj = Phi_r*x_traj + (1 - Phi_r)*(Y_Setpoint - YTrue_N);
     Y_traj = YTrue_N + x_traj;
    [Sx_pred, Sz_pred]= SMPC_State_Estimation1( P_Y, Ts , YTrue_N, Samp ,Sx_pred, uk_f );
    Samp= Samp+1;
    ykpred= C*Sz_pred + ek_f;
    Error_f= Y_traj - ykpred;
    objfn = objfn + Error_f'*We*Error_f;
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% PMMA MArkov Process For use in Particle filtering of MMA %%
function [x_pred]=SMPC_MMA_Markov1(x,k,Ts,U)
  global N_workers
  Tf= k*Ts;
  Ti= Tf - Ts;
%zeros(size(x));
p=size(x,2);
b= floor(p/N_workers);
Par_C=cell(1,N_workers);
parfor i=1:N_workers
    if i==N_workers
        t=p;
    else
       t= i*b
    end
    Par_x=[];
    for c=(i-1)*b + 1 : t
    y0=(x(:,c));
    try
    Par_x=[Par_x, SMPC_MMA_Markov_Sim1(Ti,Tf,y0,U)];
    catch
    end
    Par_C(1,i)={Par_x};
    end
end
    x_pred=cell2mat(Par_C);
end
